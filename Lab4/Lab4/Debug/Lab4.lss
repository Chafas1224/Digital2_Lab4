
Lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000262  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000262  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000262  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000294  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009c3  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000828  00000000  00000000  00000d37  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000540  00000000  00000000  0000155f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00001aa0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000464  00000000  00000000  00001c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002dd  00000000  00000000  00002064  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002341  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__vector_24>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 a8 00 	call	0x150	; 0x150 <main>
  88:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initADC>:
volatile uint8_t pot1 = 0;
volatile uint8_t pot2 = 0;
volatile uint8_t canal_adc = 0;

void initADC(){
	ADMUX = 0;
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1
	// REFERENCIA AVCC = 5V
	ADMUX |= (1 << REFS0);
  96:	80 81       	ld	r24, Z
  98:	80 64       	ori	r24, 0x40	; 64
  9a:	80 83       	st	Z, r24
	ADMUX &= ~(1 << REFS1);
  9c:	80 81       	ld	r24, Z
  9e:	8f 77       	andi	r24, 0x7F	; 127
  a0:	80 83       	st	Z, r24
	// JUSTIFICACION A LA IZQUIERDA
	ADMUX |= (1 << ADLAR);
  a2:	80 81       	ld	r24, Z
  a4:	80 62       	ori	r24, 0x20	; 32
  a6:	80 83       	st	Z, r24
	// PRESCALER 128
	ADCSRA = 0;
  a8:	ea e7       	ldi	r30, 0x7A	; 122
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	10 82       	st	Z, r1
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
  ae:	80 81       	ld	r24, Z
  b0:	87 60       	ori	r24, 0x07	; 7
  b2:	80 83       	st	Z, r24
	// HABILITAR INTERRUPCIÓN DE ADC
	ADCSRA |= (1 << ADIE);
  b4:	80 81       	ld	r24, Z
  b6:	88 60       	ori	r24, 0x08	; 8
  b8:	80 83       	st	Z, r24
	// HABILITAR ADC
	ADCSRA |= (1 << ADEN);
  ba:	80 81       	ld	r24, Z
  bc:	80 68       	ori	r24, 0x80	; 128
  be:	80 83       	st	Z, r24
  c0:	08 95       	ret

000000c2 <iniciarADC>:
}

void iniciarADC(uint8_t canal){
	ADMUX = (ADMUX & 0xF8) | (canal & 0x07); // Seleccionar canal
  c2:	ec e7       	ldi	r30, 0x7C	; 124
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	90 81       	ld	r25, Z
  c8:	98 7f       	andi	r25, 0xF8	; 248
  ca:	87 70       	andi	r24, 0x07	; 7
  cc:	89 2b       	or	r24, r25
  ce:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);  // Iniciar conversión
  d0:	ea e7       	ldi	r30, 0x7A	; 122
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	80 64       	ori	r24, 0x40	; 64
  d8:	80 83       	st	Z, r24
  da:	08 95       	ret

000000dc <__vector_21>:
}


ISR(ADC_vect){
  dc:	1f 92       	push	r1
  de:	0f 92       	push	r0
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
  e6:	2f 93       	push	r18
  e8:	3f 93       	push	r19
  ea:	4f 93       	push	r20
  ec:	5f 93       	push	r21
  ee:	6f 93       	push	r22
  f0:	7f 93       	push	r23
  f2:	8f 93       	push	r24
  f4:	9f 93       	push	r25
  f6:	af 93       	push	r26
  f8:	bf 93       	push	r27
  fa:	ef 93       	push	r30
  fc:	ff 93       	push	r31
	if (canal_adc == 0){
  fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 102:	81 11       	cpse	r24, r1
 104:	06 c0       	rjmp	.+12     	; 0x112 <__vector_21+0x36>
		pot1 = ADCH;  // Guardar el valor de ADC0
 106:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 10a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <pot1>
		canal_adc = 0;
 10e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	// 		} else {
	// 		pot2 = ADCH;  // Guardar el valor de ADC1
	// 		canal_adc = 0;

iniciarADC(canal_adc); // Iniciar la siguiente conversión automáticamente
 112:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 116:	0e 94 61 00 	call	0xc2	; 0xc2 <iniciarADC>
 11a:	ff 91       	pop	r31
 11c:	ef 91       	pop	r30
 11e:	bf 91       	pop	r27
 120:	af 91       	pop	r26
 122:	9f 91       	pop	r25
 124:	8f 91       	pop	r24
 126:	7f 91       	pop	r23
 128:	6f 91       	pop	r22
 12a:	5f 91       	pop	r21
 12c:	4f 91       	pop	r20
 12e:	3f 91       	pop	r19
 130:	2f 91       	pop	r18
 132:	0f 90       	pop	r0
 134:	0f be       	out	0x3f, r0	; 63
 136:	0f 90       	pop	r0
 138:	1f 90       	pop	r1
 13a:	18 95       	reti

0000013c <I2C_Slave_Init>:
	}
}

// Función para inicializar I2C Esclavo
void I2C_Slave_Init(uint8_t address){
	DDRC &= ~((1<<DDC4)|(1<<DDC5)); // Pines de I2C como entradas
 13c:	97 b1       	in	r25, 0x07	; 7
 13e:	9f 7c       	andi	r25, 0xCF	; 207
 140:	97 b9       	out	0x07, r25	; 7
	
	TWAR = address << 1; // Se asigna la dirección que tendra
 142:	88 0f       	add	r24, r24
 144:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
	//TWAR = (address << 1| 0x01); //Se asigna la dirección	que tendrá y habilita llamada
	
	//Se habilita la interfaz, ACK automatico, se habliita la ISR
	TWCR = (1<<TWEA)|(1<<TWEN)|(1<<TWIE);
 148:	85 e4       	ldi	r24, 0x45	; 69
 14a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 14e:	08 95       	ret

00000150 <main>:

int main(void)
{
// 	DDRB |= (1<<DDB5);
// 	PORTB &= ~(1<<PORTB5);
	initADC();
 150:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
	iniciarADC(0);
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	0e 94 61 00 	call	0xc2	; 0xc2 <iniciarADC>
	I2C_Slave_Init(SlaveAddress);
 15a:	80 e3       	ldi	r24, 0x30	; 48
 15c:	0e 94 9e 00 	call	0x13c	; 0x13c <I2C_Slave_Init>
	sei(); //
 160:	78 94       	sei
	while (1)
	{
		//iniciarADC(0);
		valorADC = pot1;
 162:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <pot1>
 166:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <valorADC>
 16a:	fb cf       	rjmp	.-10     	; 0x162 <main+0x12>

0000016c <__vector_24>:
		//_delay_ms(10);
	}
}


ISR(TWI_vect){
 16c:	1f 92       	push	r1
 16e:	0f 92       	push	r0
 170:	0f b6       	in	r0, 0x3f	; 63
 172:	0f 92       	push	r0
 174:	11 24       	eor	r1, r1
 176:	8f 93       	push	r24
 178:	ef 93       	push	r30
 17a:	ff 93       	push	r31
	uint8_t estado;
	estado = TWSR & 0xFC;
 17c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 180:	8c 7f       	andi	r24, 0xFC	; 252
	switch(estado){
 182:	80 38       	cpi	r24, 0x80	; 128
 184:	99 f0       	breq	.+38     	; 0x1ac <__vector_24+0x40>
 186:	28 f4       	brcc	.+10     	; 0x192 <__vector_24+0x26>
 188:	80 36       	cpi	r24, 0x60	; 96
 18a:	51 f0       	breq	.+20     	; 0x1a0 <__vector_24+0x34>
 18c:	80 37       	cpi	r24, 0x70	; 112
 18e:	41 f0       	breq	.+16     	; 0x1a0 <__vector_24+0x34>
 190:	1f c0       	rjmp	.+62     	; 0x1d0 <__vector_24+0x64>
 192:	88 3a       	cpi	r24, 0xA8	; 168
 194:	a9 f0       	breq	.+42     	; 0x1c0 <__vector_24+0x54>
 196:	88 3b       	cpi	r24, 0xB8	; 184
 198:	99 f0       	breq	.+38     	; 0x1c0 <__vector_24+0x54>
 19a:	80 39       	cpi	r24, 0x90	; 144
 19c:	c9 f4       	brne	.+50     	; 0x1d0 <__vector_24+0x64>
 19e:	06 c0       	rjmp	.+12     	; 0x1ac <__vector_24+0x40>
		case 0x60:
		case 0x70:
			TWCR |= (1<< TWINT);
 1a0:	ec eb       	ldi	r30, 0xBC	; 188
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	80 81       	ld	r24, Z
 1a6:	80 68       	ori	r24, 0x80	; 128
 1a8:	80 83       	st	Z, r24
			break;
 1aa:	17 c0       	rjmp	.+46     	; 0x1da <__vector_24+0x6e>
		case 0x80:
		case 0x90:
			buffer = TWDR;
 1ac:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 1b0:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <buffer>
			TWCR |= (1<< TWINT);
 1b4:	ec eb       	ldi	r30, 0xBC	; 188
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	80 68       	ori	r24, 0x80	; 128
 1bc:	80 83       	st	Z, r24
			break;
 1be:	0d c0       	rjmp	.+26     	; 0x1da <__vector_24+0x6e>
		case 0xA8:
		case 0xB8:
			TWDR = valorADC;
 1c0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <valorADC>
 1c4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			TWCR = (1 << TWEN)|(1<<TWIE)|(1<<TWINT)|(1<<TWEA);
 1c8:	85 ec       	ldi	r24, 0xC5	; 197
 1ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
			break;
 1ce:	05 c0       	rjmp	.+10     	; 0x1da <__vector_24+0x6e>
		default:
 			TWCR |= (1<<TWINT)|(1<<TWSTO);
 1d0:	ec eb       	ldi	r30, 0xBC	; 188
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	80 69       	ori	r24, 0x90	; 144
 1d8:	80 83       	st	Z, r24
 		break;
 		}
 1da:	ff 91       	pop	r31
 1dc:	ef 91       	pop	r30
 1de:	8f 91       	pop	r24
 1e0:	0f 90       	pop	r0
 1e2:	0f be       	out	0x3f, r0	; 63
 1e4:	0f 90       	pop	r0
 1e6:	1f 90       	pop	r1
 1e8:	18 95       	reti

000001ea <_exit>:
 1ea:	f8 94       	cli

000001ec <__stop_program>:
 1ec:	ff cf       	rjmp	.-2      	; 0x1ec <__stop_program>
